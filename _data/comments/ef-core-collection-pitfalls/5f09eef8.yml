id: 5f09eef8
date: 2023-05-09T14:16:05.2216822Z
name: Chris
avatar: https://robohash.org/3ff94a14c4940b7a07616a96ccae0d49
message: "Could be a little trickier to plumb in to return from EF / your repo but perhaps something like a discriminated union could satisfy the last statement by encoding the loaded-ness in the type system.  So in C# you'd have something like:\r\n`public OneOf<IList<Comment>, IList<Comment>?>Comments { get; set; }`\r\n(see https://github.com/mcintyre321/OneOf for an implementation of OneOf)\r\n\r\nThe gist is you're returning a thing that contains both of the specified types, but one is always null.  So if you included the collection in your query, you'd return <IList<Comment>, null>, and otherwise you'd return <null, IList<Comment>?>.  The OneOf class also has code that abstracts away the messy \"if the first one has a value, do this, if the second has a value do the other\".\r\n\r\nCallers can then do things like:\r\n```\r\nComments.Switch(\r\n  x => DoSomethingWithFullyLoadedComments(x), \r\n  x => DoSomethingWithPartiallyLoadedComments(x))\r\n```\r\n\r\nOr, if you like old fashioned if statements,\r\n```\r\nif(Comments.IsT0) DoSomethingWithFullyLoadedComments(x);\r\nelse DoSomethingWithPartiallyLoadedComments(x);\r\n```\r\n\r\n(See also https://haacked.com/archive/2013/11/08/death-to-the-if-statement.aspx/ - OneOf abstracts away if and case statements)\r\n\r\n\r\n"
